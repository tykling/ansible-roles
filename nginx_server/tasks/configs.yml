---
- name: "Copy nginx.conf"
  template:
    src: "nginx.conf.j2"
    dest: "/usr/local/etc/nginx/nginx.conf"
  notify: "reload nginx"

- name: "Copy default nginx TLS config"
  template:
    src: "tls.conf.j2"
    dest: "/usr/local/etc/nginx/tls.conf"
  when: nginx_proxy
  notify: "reload nginx"

- name: "Copy nginx securityheaders.conf"
  template:
    src: "securityheaders.conf.j2"
    dest: "/usr/local/etc/nginx/securityheaders.conf"
  when: nginx_proxy
  notify: "reload nginx"

- name: "Copy nginx proxyheaders.conf"
  template:
    src: "proxyheaders.conf.j2"
    dest: "/usr/local/etc/nginx/proxyheaders.conf"
  when: nginx_proxy
  notify: "reload nginx"

- name: "Copy nginx websockets.conf"
  template:
    src: "websockets.conf.j2"
    dest: "/usr/local/etc/nginx/websockets.conf"
  when: nginx_proxy
  notify: "reload nginx"

- name: "Copy nginx cors.conf"
  template:
    src: "cors.conf.j2"
    dest: "/usr/local/etc/nginx/cors.conf"
  notify: "reload nginx"

- name: "Include node specific nginx_extra_configs.yml if it exists..."
  include_vars: "../host_vars/{{ ansible_nodename }}-nginx_extra_configs.yml"
  ignore_errors: yes
  tags:
    - "vhosts"

- name: "Include include_vars/nginx_common_extra_configs.yml if it exists..."
  include_vars: "../include_vars/nginx_common_extra_configs.yml"
  ignore_errors: yes
  tags:
    - "vhosts"

- name: "Create extra nginx config files..."
  copy:
    owner: "www"
    group: "wheel"
    mode: "0640"
    content: "{{ item.content }}"
    dest: "/usr/local/etc/nginx/{{ item.filename }}"
  with_items: "{{ nginx_extra_configs | default([]) + nginx_common_extra_configs | default([]) }}"
  notify: "reload nginx"
  tags:
    - "vhosts"

- name: "Copy vhost http configs for http enabled vhosts"
  template:
    src: "http-vhost.conf.j2"
    dest: "/usr/local/etc/nginx/vhosts/{{ item.value.filename|default(item.value.hostnames[0]) }}-http.conf"
  with_dict: "{{ vhosts | default({}) }}"
  when:
    - nginx_proxy
    - (('http' in item.value and item.value.http) or 'http' not in item.value)
  notify:
    - "start nginx"
    - "reload nginx"
  tags:
    - "vhosts"

- name: "Reload nginx now, so http vhosts are available for Certgrinder"
  service:
    name: nginx
    state: reloaded
  when:
    - nginx_proxy
    - certgrinder_hostname_sets is defined
  tags:
    - "vhosts"

- name: "Run certgrinder"
  command: "/usr/bin/su -m {{ certgrinder_user }} -c '/usr/local/bin/certgrinder --config-file {{ certgrinder_home }}/certgrinder.conf --now periodic'"
  when:
    - nginx_proxy
    - certgrinder_hostname_sets is defined
  tags:
    - "vhosts"

- name: "Copy vhost https configs for https enabled vhosts"
  template:
    src: "https-vhost.conf.j2"
    dest: "/usr/local/etc/nginx/vhosts/{{ item.value.filename|default(item.value.hostnames[0]) }}-https.conf"
  with_dict: "{{ vhosts | default({}) }}"
  when:
    - nginx_proxy
    - (('https' in item.value and item.value.https) or 'https' not in item.value)
  notify: "reload nginx"
  tags:
    - "vhosts"
