server {
    # listen here you little..
{% if item.value.listen_on_all_ips | default(False) %}
    listen                  443 ssl;
    listen                  [::]:443 ssl;
{% else %}
    listen                  {{ nginx_v4_proxy_ip }}:443 ssl;
{% if item.value.vhost_v6ip is defined %}
    listen                  [{{ item.value.vhost_v6ip }}]:443 ssl;
{% endif %}
{% endif %}
    http2 on;

    # hostnames handled in this vhost, IDN names are included both as idna and ascii, where applicable
    server_name             {% for hostname in item.value.hostnames %}{{ hostname.encode('idna').decode('ascii') }} {% if hostname != hostname.encode('idna').decode('ascii') %}{{ hostname }} {% endif %}{% endfor %};

{% if item.value.letsencrypt | default(True) %}
    ssl_certificate         {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-chain.rsa.crt;
    ssl_certificate_key     {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-keypair.rsa.key;
    ssl_certificate         {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-chain.ecdsa.crt;
    ssl_certificate_key     {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-keypair.ecdsa.key;
{% else %}
    ssl_certificate         /usr/local/etc/nginx/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}.crt;
    ssl_certificate_key     /usr/local/etc/nginx/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}.key;
{% endif %}
    include                 /usr/local/etc/nginx/tls.conf;
{% if 'csp' in item.value %}
    more_set_headers        "Content-Security-Policy: {{ item.value.csp }}";
{% endif %}
    include                 /usr/local/etc/nginx/securityheaders.conf;
{% if item.value.reverse_proxy | default(True) %}
    include                 /usr/local/etc/nginx/proxyheaders.conf;
{% endif %}
{% if item.value.websockets | default(True) %}
    # websocket support
    proxy_http_version      1.1;
    proxy_set_header        Upgrade $http_upgrade;
    proxy_set_header        Connection $connection_upgrade;
{% endif %}
{% if nginx_cors_origins|default([]) %}
    proxy_set_header Origin '$http_origin';
{% endif %}

{% if 'more_headers' in item.value %}
    # extra custom HTTP headers for this vhost
{% for header, value in item.value.more_headers %}
    more_set_headers        "{{ header }}: {{ value }}";
{% endfor %}{% endif %}

    location = /__nginx_ocsp_priming/ {
        return 200 'OK';
    }

    # vhost specific config below here

{{ item.value.locationslash | indent( width=4, first=True ) }}
}
{% if item.value.extraconfig | default(False) %}
{{ item.value.extraconfig }}
{% endif %}


{% if not item.value.skip_catchall|default(False) and item.value.redirect_ip_to_hostname | default(True) and ( item.value.vhost_v6ip is defined or ( item.value.default_vhost is defined and item.value.default_vhost ) ) %}
# catch-all server block for the requests going to the v6 IPs with blank or unknown Host: header,
# and to the v4 ip if this is the default vhost
server {
{% if item.value.listen_on_all_ips | default(False) %}
{% if item.value.default_vhost | default(False) %}
    # this is the default vhost for this v4 ip
    listen                  443 default ssl;
{% endif %}
    listen                  [::]:443 default ssl;
{% else %}
{% if item.value.default_vhost | default(False) %}
    # this is the default vhost for this v4 ip
    listen                  {{ nginx_v4_proxy_ip }}:443 default ssl;
{% endif %}
{% if item.value.vhost_v6ip is defined %}
    listen                  [{{ item.value.vhost_v6ip }}]:443 default ssl;
{% endif %}
{% endif %}
    http2 on;
    server_name             _;

    # certificate and key (wont match hostname, but whatever, this is just a fallback vhost)
{% if item.value.letsencrypt | default(True) %}
    ssl_certificate         {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-chain.rsa.crt;
    ssl_certificate_key     {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-keypair.rsa.key;
    ssl_certificate         {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-chain.ecdsa.crt;
    ssl_certificate_key     {{ certgrinder_home }}/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}-keypair.ecdsa.key;
{% else %}
    ssl_certificate         /usr/local/etc/nginx/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}.crt;
    ssl_certificate_key     /usr/local/etc/nginx/certificates/{{ item.value.filename|default(item.value.hostnames[0].encode('idna').decode('ascii')) }}.key;
{% endif %}
    include                 /usr/local/etc/nginx/tls.conf;
    include                 /usr/local/etc/nginx/securityheaders.conf;

    # redirect requests to the first hostname in the list
    location / {
{% if item.value.redirect_keep_url | default(True) %}
        return              302 https://{{ item.value.hostnames[0] }}$request_uri;
{% else %}
        return              302 https://{{ item.value.hostnames[0] }};
{% endif %}
    }
}
{% endif %}

