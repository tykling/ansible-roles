### modules
load_module                     /usr/local/libexec/nginx/ngx_http_headers_more_filter_module.so;
load_module                     /usr/local/libexec/nginx/ndk_http_module.so;
load_module                     /usr/local/libexec/nginx/ngx_http_lua_module.so;
load_module                     /usr/local/libexec/nginx/ngx_stream_module.so;

### default error log
error_log                               /usr/local/www/logs/error.log;
error_log                               syslog:server=unix:/var/run/log; # defaults to facility local7

### max clients = worker_processes * worker_connections
worker_processes                {{ nginx_worker_processes }};
events {
    worker_connections          {{ nginx_worker_connections }};
}

http {
    include                     mime.types;
    default_type                application/octet-stream;
{% if nginx_proxy | default(False) %}
    log_format timingjson escape=json '{'
      '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
      '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
      '"connection": "$connection", ' # connection serial number
      '"connection_requests": "$connection_requests", ' # number of requests made in connection
      '"request_id": "$request_id", ' # the unique request id
      '"request_length": "$request_length", ' # request length (including headers and body)
      '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
      '"remote_addr": "$remote_addr", ' # client IP
      '"remote_port": "$remote_port", ' # client port
      '"remote_user": "$remote_user", ' # client HTTP username
      '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
      '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
      '"http_user_agent": "$http_user_agent", ' # user agent
      '"http_referer": "$http_referer", ' # HTTP referer
      '"http_host": "$http_host", ' # the request Host: header
      '"server_name": "$server_name", ' # the name of the vhost serving the request
      '"scheme": "$scheme", ' # http or https
      '"request_method": "$request_method", ' # request method
      '"request_uri": "$request_uri", ' # full path and arguments if the request
      '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
      '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
      '"status": "$status", ' # response status code
      '"sent_http_location": "$sent_http_location", ' # the Location: header in a redirect response
      '"pipe": "$pipe", ' # “p” if request was pipelined, “.” otherwise
      '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
      '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
      '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
      '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
      '"upstream_cache_status": "$upstream_cache_status"' # cache HIT/MISS where applicable
    '}';
    access_log                  /usr/local/www/logs/proxytiming.json timingjson;
    port_in_redirect {{ nginx_port_in_redirect }};
{% if nginx_cache %}
    proxy_cache_path {{ nginx_cache_path }} levels=1:2 keys_zone=my_cache:10m max_size={{ nginx_cache_size }} inactive={{ nginx_cache_inactive }} use_temp_path=off;
    proxy_cache_key "$scheme://$host$request_uri";
{% endif %}
    proxy_buffers {{ nginx_proxy_buffers }};
    proxy_buffer_size {{ nginx_proxy_buffer_size }};
    proxy_busy_buffers_size {{ nginx_proxy_busy_buffers_size }};
    proxy_http_version 1.1;
{% for bypass in nginx_proxy_cache_bypass %}
    proxy_cache_bypass {{ bypass }};
{% endfor %}
{% else %}
    log_format                  main  '$host - [$remote_addr]:$http_x_forwarded_port - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" - $request_time sec - request_id $http_x_request_id - request_length: $request_length';
    access_log                  /usr/local/www/logs/access.log  main;
{% endif %}
    sendfile                    off;
    keepalive_timeout           65;
    client_max_body_size        {{ nginx_client_max_body_size }};
    server_tokens               off;
    more_set_headers            'Server: Yes';

{% if nginx_extra_http_config|default("") %}
{{ nginx_extra_http_config | indent( width=4, first=True ) }}
{% endif %}

{% if nginx_proxy | default(False) %}
    # map $http_upgrade into $connection_upgrade for use in vhosts for websocket support
    include                 /usr/local/etc/nginx/websockets.conf;
{% endif %}

{% if nginx_proxy | default(False) %}
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size
    server_names_hash_bucket_size 64;

    include /usr/local/etc/nginx/vhosts/*.conf;
{% else %}
    server {
        listen       80;
        listen       [::]:80;

{% if nginx_set_real_ip_from|d(True) %}
        set_real_ip_from   {{ nginx_v4_proxy_ip|d("127.0.0.1") }};
        set_real_ip_from   {{ nginx_v6_proxy_ip|d("::1") }};
        real_ip_header     X-Forwarded-For;
{% endif %}

        access_log syslog:server=unix:/var/run/log main;
        access_log /usr/local/www/logs/access.log  main;

        uwsgi_buffers 256 4k;

        location = /stub_status {
            stub_status;
            allow 127.0.0.1;
            allow ::1;
{% for ip in ansible_facts.all_ipv4_addresses %}
            allow {{ ip }};
{% endfor %}
{% for ip in ansible_facts.all_ipv6_addresses %}
{% if not ip.startswith('fe80') %}
            allow {{ ip }};
{% endif %}
{% endfor %}
            deny all;
        }

{{ nginx_locationslash | indent( width=8, first=True ) }}
    }
{% endif %}
}

{% if nginx_extraconf | default(False) %}
{{ nginx_extraconf }}
{% endif %}

